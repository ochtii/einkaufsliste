# =============================================================================
# Demo Backend Deployment Workflow
# =============================================================================
name: Deploy Demo Backend

on:
  push:
    branches: [ live ]
    paths: 
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-
        
    - name: Install backend dependencies
      run: |
        cd backend
        # Check if package-lock.json exists and is valid
        if [ -f package-lock.json ]; then
          echo "package-lock.json found, attempting npm ci..."
          npm ci || {
            echo "npm ci failed, falling back to npm install..."
            rm -f package-lock.json
            npm install
          }
        else
          echo "package-lock.json not found, using npm install..."
          npm install
        fi
        
    - name: Create demo backend configuration
      run: |
        cd backend
        
        # Create demo environment file
        cat > .env.demo << 'EOF'
        NODE_ENV=production
        PORT=3000
        JWT_SECRET=demo-jwt-secret-key-for-github-pages
        DB_PATH=./demo.sqlite
        DEMO_MODE=true
        CORS_ORIGIN=https://ochtii.github.io
        EOF
        
        # Create demo data seed script
        cat > demo-seed.js << 'EOF'
        import sqlite3 from 'sqlite3';
        import bcrypt from 'bcrypt';
        import { v4 as uuidv4 } from 'uuid';
        
        const db = new sqlite3.Database('./demo.sqlite');
        
        // Create tables and seed demo data
        db.serialize(() => {
          // Users table
          db.run(`CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uuid TEXT UNIQUE NOT NULL,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE,
            password TEXT NOT NULL,
            role TEXT DEFAULT 'user',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
          )`);
          
          // Categories table
          db.run(`CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            icon TEXT NOT NULL,
            user_id INTEGER,
            is_global BOOLEAN DEFAULT FALSE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
          )`);
          
          // Standard articles table
          db.run(`CREATE TABLE IF NOT EXISTS standard_articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            category TEXT NOT NULL,
            icon TEXT,
            user_id INTEGER,
            is_global BOOLEAN DEFAULT FALSE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
          )`);
          
          // Lists table
          db.run(`CREATE TABLE IF NOT EXISTS lists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uuid TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            user_id INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
          )`);
          
          // Articles table
          db.run(`CREATE TABLE IF NOT EXISTS articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            category TEXT,
            icon TEXT,
            comment TEXT,
            is_bought BOOLEAN DEFAULT FALSE,
            list_id INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (list_id) REFERENCES lists (id)
          )`);
          
          // Seed demo users
          const demoPasswordHash = bcrypt.hashSync('demo123', 10);
          const adminPasswordHash = bcrypt.hashSync('admin123', 10);
          
          db.run(`INSERT OR IGNORE INTO users (uuid, username, email, password, role) VALUES 
            (?, 'demo', 'demo@example.com', ?, 'user'),
            (?, 'admin', 'admin@example.com', ?, 'admin')
          `, [uuidv4(), demoPasswordHash, uuidv4(), adminPasswordHash]);
          
          // Seed demo categories
          db.run(`INSERT OR IGNORE INTO categories (name, icon, is_global) VALUES 
            ('Obst & Gem√ºse', 'üçé', TRUE),
            ('Milchprodukte', 'ü•õ', TRUE),
            ('Fleisch & Fisch', 'ü•©', TRUE),
            ('Brot & Backwaren', 'üçû', TRUE),
            ('Getr√§nke', 'ü•§', TRUE),
            ('S√º√üwaren', 'üç´', TRUE),
            ('Haushalt', 'üßΩ', TRUE),
            ('Sonstiges', 'üì¶', TRUE)
          `);
          
          // Seed demo standard articles
          db.run(`INSERT OR IGNORE INTO standard_articles (name, category, icon, is_global) VALUES 
            ('√Ñpfel', 'Obst & Gem√ºse', 'üçé', TRUE),
            ('Bananen', 'Obst & Gem√ºse', 'üçå', TRUE),
            ('Milch', 'Milchprodukte', 'ü•õ', TRUE),
            ('K√§se', 'Milchprodukte', 'üßÄ', TRUE),
            ('Brot', 'Brot & Backwaren', 'üçû', TRUE),
            ('Butter', 'Milchprodukte', 'üßà', TRUE),
            ('Wasser', 'Getr√§nke', 'üíß', TRUE),
            ('Kaffee', 'Getr√§nke', '‚òï', TRUE)
          `);
        });
        
        db.close();
        console.log('Demo database seeded successfully!');
        EOF
        
        # Run demo seed script
        node demo-seed.js
        
    # Add deployment steps for your chosen platform here
    # Examples for different platforms:
    
    # For Railway.app deployment:
    # - name: Deploy to Railway
    #   run: |
    #     npm install -g @railway/cli
    #     railway login --browserless
    #     railway up
    #   env:
    #     RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    # For Heroku deployment:
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.12
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "einkaufsliste-demo"
    #     heroku_email: ${{ secrets.HEROKU_EMAIL }}
    #     appdir: "backend"
    
    # For Render.com deployment:
    # - name: Deploy to Render
    #   run: |
    #     curl -X POST \
    #       -H "Accept: application/json" \
    #       -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
    #       "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys"
    
    - name: Deployment Summary
      run: |
        echo "üöÄ Demo Backend Deployment Summary:"
        echo "üìÅ Backend files prepared"
        echo "üóÑÔ∏è Demo database seeded"
        echo "‚öôÔ∏è Environment configured"
        echo ""
        echo "üìù Next steps for deployment:"
        echo "1. Choose a deployment platform (Railway, Heroku, Render, etc.)"
        echo "2. Add platform-specific secrets to GitHub repository"
        echo "3. Uncomment the relevant deployment section above"
        echo "4. Update frontend API endpoint configuration"
