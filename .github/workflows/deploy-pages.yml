# =============================================================================
# GitHub Pages Deployment for Einkaufsliste Frontend
# =============================================================================
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-20-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-20-
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Install frontend dependencies
      run: |
        cd frontend
        # Always use npm install to avoid version conflicts
        echo "Using npm install for reliable dependency resolution..."
        npm install
        
    - name: Build frontend for production
      run: |
        cd frontend
        npm run build
      env:
        CI: false
        GENERATE_SOURCEMAP: false
        PUBLIC_URL: /einkaufsliste
        
    - name: Create demo configuration
      run: |
        cd frontend
        
        # Ensure build directory exists
        mkdir -p build
        
        # Copy demo files to build directory (with fallback)
        if [ -f "public/demo.html" ]; then
          cp public/demo.html build/
        else
          echo "demo.html not found, will be created inline"
        fi
        
        # Copy the complete demo-config.js (don't overwrite!)
        if [ -f "public/demo-config.js" ]; then
          echo "Copying complete demo-config.js with DemoAPI"
          
          # Create a working copy first
          cp public/demo-config.js build/demo-config.js
          
          # Update the timestamps in the build copy
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          build_timestamp=$(date +%s)000  # JavaScript timestamp (milliseconds)
          
          # Use reliable placeholder replacement
          sed -i "s/__TIMESTAMP_PLACEHOLDER__/$current_time/g" build/demo-config.js
          sed -i "s/__BUILD_TIMESTAMP_PLACEHOLDER__/$build_timestamp/g" build/demo-config.js
          
          echo "‚úÖ Demo config updated with timestamp: $current_time"
          echo "Build timestamp: $build_timestamp"
          
          # Verify the file is still valid JavaScript
          if node -c build/demo-config.js 2>/dev/null; then
            echo "‚úÖ demo-config.js syntax is valid"
          else
            echo "‚ùå demo-config.js syntax error, using original file"
            cp public/demo-config.js build/demo-config.js
          fi
        else
          echo "ERROR: demo-config.js not found in public folder!"
          exit 1
        fi
        
        # Create app.html as the React app entry point and inject demo config
        if [ -f "build/index.html" ]; then
          # Copy the built React app (which has all the correct script references)
          cp build/index.html build/app.html
          
          # Inject demo-config.js script into app.html before closing body tag (if not already there)
          if ! grep -q "demo-config.js" build/app.html; then
            sed -i 's|</body>|  <script src="demo-config.js"></script>\n</body>|' build/app.html
          fi
          
          echo "‚úÖ app.html created with proper React scripts and demo config"
        else
          echo "Warning: build/index.html not found"
        fi
        
        # Replace index.html with our landing page
        if [ -f "public/landing.html" ]; then
          cp public/landing.html build/index.html
        else
          echo "Warning: public/landing.html not found"
        fi
        
        # Verify demo-config.js was copied successfully
        if [ -f "build/demo-config.js" ]; then
          echo "‚úÖ Demo config successfully copied with DemoAPI"
          head -n 5 build/demo-config.js
        else
          echo "‚ùå ERROR: demo-config.js not found in build directory!"
          exit 1
        fi
        
        # Create demo instructions
        echo '<!DOCTYPE html>' > demo-instructions.html
        echo '<html lang="de">' >> demo-instructions.html
        echo '<head>' >> demo-instructions.html
        echo '    <meta charset="UTF-8">' >> demo-instructions.html
        echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> demo-instructions.html
        echo '    <title>Einkaufsliste Demo - Anleitung</title>' >> demo-instructions.html
        echo '    <style>' >> demo-instructions.html
        echo '        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }' >> demo-instructions.html
        echo '        .demo-banner { background: #3b82f6; color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px; }' >> demo-instructions.html
        echo '        .credentials { background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 15px 0; }' >> demo-instructions.html
        echo '        .feature-list { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; }' >> demo-instructions.html
        echo '        .feature-card { background: white; border: 1px solid #e5e7eb; padding: 15px; border-radius: 8px; }' >> demo-instructions.html
        echo '    </style>' >> demo-instructions.html
        echo '</head>' >> demo-instructions.html
        echo '<body>' >> demo-instructions.html
        echo '    <div class="demo-banner">' >> demo-instructions.html
        echo '        <h1>üõí Einkaufsliste Demo</h1>' >> demo-instructions.html
        echo '        <p>Willkommen zur Demo-Version der Einkaufsliste-Anwendung!</p>' >> demo-instructions.html
        echo '    </div>' >> demo-instructions.html
        echo '    <h2>üìã Demo-Anmeldedaten</h2>' >> demo-instructions.html
        echo '    <div class="credentials">' >> demo-instructions.html
        echo '        <h3>üßë‚Äçüíº Benutzer-Account:</h3>' >> demo-instructions.html
        echo '        <p><strong>Benutzername:</strong> demo</p>' >> demo-instructions.html
        echo '        <p><strong>Passwort:</strong> demo123</p>' >> demo-instructions.html
        echo '        <h3>üë®‚Äçüíª Admin-Account:</h3>' >> demo-instructions.html
        echo '        <p><strong>Benutzername:</strong> admin</p>' >> demo-instructions.html
        echo '        <p><strong>Passwort:</strong> admin123</p>' >> demo-instructions.html
        echo '    </div>' >> demo-instructions.html
        echo '    <h2>‚ú® Verf√ºgbare Features</h2>' >> demo-instructions.html
        echo '    <div class="feature-list">' >> demo-instructions.html
        echo '        <div class="feature-card"><h3>üìù Einkaufslisten</h3><p>Erstellen und verwalten Sie multiple Einkaufslisten</p></div>' >> demo-instructions.html
        echo '        <div class="feature-card"><h3>üè∑Ô∏è Kategorien</h3><p>Organisieren Sie Artikel nach Kategorien mit Emojis</p></div>' >> demo-instructions.html
        echo '        <div class="feature-card"><h3>‚≠ê Favoriten</h3><p>Speichern Sie h√§ufig verwendete Artikel</p></div>' >> demo-instructions.html
        echo '        <div class="feature-card"><h3>üìÑ Export</h3><p>Exportieren Sie Listen als Textdateien</p></div>' >> demo-instructions.html
        echo '        <div class="feature-card"><h3>üåô Dark Theme</h3><p>Moderne, responsive Benutzeroberfl√§che</p></div>' >> demo-instructions.html
        echo '        <div class="feature-card"><h3>üì± Responsive</h3><p>Funktioniert auf Desktop und Mobilger√§ten</p></div>' >> demo-instructions.html
        echo '    </div>' >> demo-instructions.html
        echo '    <h2>üöÄ Zur Demo-App</h2>' >> demo-instructions.html
        echo '    <p><a href="index.html" style="display: inline-block; background: #3b82f6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 8px;">Demo starten</a></p>' >> demo-instructions.html
        echo '    <h2>üìö Mehr Informationen</h2>' >> demo-instructions.html
        echo '    <p>Vollst√§ndige Dokumentation und Quellcode:</p>' >> demo-instructions.html
        echo '    <ul>' >> demo-instructions.html
        echo '        <li><a href="https://github.com/ochtii/einkaufsliste">GitHub Repository</a></li>' >> demo-instructions.html
        echo '        <li><a href="https://github.com/ochtii/einkaufsliste#readme">README.md</a></li>' >> demo-instructions.html
        echo '        <li><a href="https://github.com/ochtii/einkaufsliste/blob/main/LICENSE">MIT License</a></li>' >> demo-instructions.html
        echo '    </ul>' >> demo-instructions.html
        echo '</body>' >> demo-instructions.html
        echo '</html>' >> demo-instructions.html
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./frontend/build

  # Deployment job
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
